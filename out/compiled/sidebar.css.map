{
  "version": 3,
  "file": "sidebar.css",
  "sources": [
    "Nav.svelte",
    "Options.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    async function setNavView(value) {\r\n        dispatch('changeView', value);\r\n    }\r\n</script>\r\n\r\n<nav>\r\n    <ul>\r\n        <li>\r\n            <button on:click={() => setNavView('Comment')}>Comment</button>\r\n        </li>\r\n        <li>\r\n            <button on:click={() => setNavView('Debug')}>Debug</button>\r\n        </li>\r\n        <li>\r\n            <button on:click={() => setNavView('Test')}>Test</button>\r\n        </li>\r\n        <li>\r\n            <button on:click={() => setNavView('Optimize')}>Optimize</button>\r\n        </li>\r\n        <li>\r\n            <button on:click={() => setNavView('Clean')}>Clean</button>\r\n        </li>\r\n        <li>\r\n            <button on:click={() => setNavView('Options')}>Options</button>\r\n        </li>\r\n    </ul>\r\n</nav>\r\n\r\n<style>\r\n    nav {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 5px;\r\n        background-color: #333;\r\n        color: white;\r\n    }\r\n\r\n    ul {\r\n        list-style-type: none;\r\n        padding: 0;\r\n        margin: 0;\r\n        display: grid;\r\n        grid-template-columns: repeat(3, 1fr);\r\n        gap: 5px;\r\n    }\r\n\r\n    button {\r\n        padding: 10px;\r\n        cursor: pointer;\r\n        width: 100%;\r\n    }\r\n</style>\r\n",
    "<script>\r\n    let selectedModel = '';\r\n    let openaiModels = [];\r\n    export let getApiModels;\r\n\r\n    getApiModels();\r\n\r\n    function handleSelection(event) {\r\n        selectedModel = event.target.value;\r\n        console.log('Selected Model:', selectedModel);\r\n    }\r\n\r\n    window.addEventListener('message', (event) => {\r\n        const message = event.data;\r\n        if (message.type === 'sendmodels') {\r\n            openaiModels = message.value;\r\n        }\r\n    });\r\n</script>\r\n\r\n<h1>Options</h1>\r\n\r\n<select bind:value={selectedModel} on:change={handleSelection}>\r\n    {#each openaiModels as model (model)}\r\n        <option value={model}>{model}</option>\r\n    {/each}\r\n</select>\r\n\r\n<p>Selected Model: {selectedModel}</p>\r\n\r\n<p>Max token response:</p>\r\n<input type=\"number\" />\r\n\r\n<style>\r\n    select {\r\n        padding: 8px;\r\n        margin: 5px;\r\n        font-size: 14px;\r\n        background-color: #333;\r\n        color: #d4d4d4;\r\n        border: 1px solid #555;\r\n        border-radius: 4px;\r\n        outline: none;\r\n    }\r\n\r\n    select:hover {\r\n        border-color: #888;\r\n    }\r\n\r\n    select:focus {\r\n        border-color: #4caf50;\r\n    }\r\n\r\n    option {\r\n        background-color: #333;\r\n        color: #d4d4d4;\r\n    }\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AAkCI,kBAAI,CACA,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,KACX,CAEA,iBAAG,CACC,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CACrC,GAAG,CAAE,GACT,CAEA,qBAAO,CACH,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,OAAO,CACf,KAAK,CAAE,IACX;ACtBA,oBAAO,CACH,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CACX,SAAS,CAAE,IAAI,CACf,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,IACb,CAEA,oBAAM,MAAO,CACT,YAAY,CAAE,IAClB,CAEA,oBAAM,MAAO,CACT,YAAY,CAAE,OAClB,CAEA,oBAAO,CACH,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,OACX"
}