{
  "version": 3,
  "file": "sidebar.css",
  "sources": [
    "Nav.svelte",
    "Options.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    async function setNavView(value) {\r\n        dispatch('changeView', value);\r\n    }\r\n</script>\r\n\r\n<nav>\r\n    <ul>\r\n        <li>\r\n            <button on:click={() => setNavView('Comment')}>Comment</button>\r\n        </li>\r\n        <li>\r\n            <button on:click={() => setNavView('Debug')}>Debug</button>\r\n        </li>\r\n        <li>\r\n            <button on:click={() => setNavView('Test')}>Test</button>\r\n        </li>\r\n        <li>\r\n            <button on:click={() => setNavView('Optimize')}>Optimize</button>\r\n        </li>\r\n        <li>\r\n            <button on:click={() => setNavView('Clean')}>Clean</button>\r\n        </li>\r\n        <li>\r\n            <button on:click={() => setNavView('Options')}>Options</button>\r\n        </li>\r\n    </ul>\r\n</nav>\r\n\r\n<style>\r\n    nav {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 5px;\r\n        background-color: #333;\r\n        color: white;\r\n    }\r\n\r\n    ul {\r\n        list-style-type: none;\r\n        padding: 0;\r\n        margin: 0;\r\n        display: grid;\r\n        grid-template-columns: repeat(3, 1fr);\r\n        gap: 5px;\r\n    }\r\n\r\n    button {\r\n        padding: 10px;\r\n        cursor: pointer;\r\n        width: 100%;\r\n    }\r\n</style>\r\n",
    "<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n\r\n    export let openaiModels;\r\n    export let currentModel;\r\n    export let maxTokens;\r\n    export let apiKey;\r\n    export let useChat;\r\n    const dispatch = createEventDispatcher();\r\n\r\n    function handleSelection(event) {\r\n        currentModel = event.target.value;\r\n        dispatch('changeModel', currentModel);\r\n    }\r\n\r\n    function handleMaxTokens(event) {\r\n        maxTokens = event.target.value;\r\n        dispatch('changeMaxTokens', maxTokens);\r\n    }\r\n\r\n    function handleApiKey(event) {\r\n        apiKey = event.target.value;\r\n        dispatch('changeApiKey', apiKey);\r\n    }\r\n\r\n    function handleUseChat(event) {\r\n        useChat = event.target.checked;\r\n        dispatch('changeUseChat', useChat);\r\n    }\r\n</script>\r\n\r\n<h1>Options</h1>\r\n\r\n<label>\r\n    Use ChatGPT (requires session key):\r\n    <input bind:checked={useChat} type=\"checkbox\" on:change={handleUseChat} />\r\n</label>\r\n\r\n<label>\r\n    {#if useChat}\r\n        ChatGPT Session Key:\r\n    {:else}\r\n        API Key:\r\n    {/if}\r\n\r\n    <input bind:value={apiKey} type=\"password\" on:change={handleApiKey} />\r\n</label>\r\n\r\n{#if !useChat}\r\n    <label>\r\n        Select model:\r\n        <select bind:value={currentModel} on:change={handleSelection}>\r\n            {#each openaiModels as model (model)}\r\n                <option value={model}>{model}</option>\r\n            {/each}\r\n        </select>\r\n    </label>\r\n{/if}\r\n\r\n<label>\r\n    Max token response:\r\n    <input bind:value={maxTokens} type=\"number\" on:change={handleMaxTokens} />\r\n</label>\r\n\r\n<style>\r\n    label {\r\n        display: block;\r\n        margin-bottom: 10px; /* Add some space between labels */\r\n    }\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AAkCI,kBAAI,CACA,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,KACX,CAEA,iBAAG,CACC,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CACrC,GAAG,CAAE,GACT,CAEA,qBAAO,CACH,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,OAAO,CACf,KAAK,CAAE,IACX;ACSA,oBAAM,CACF,OAAO,CAAE,KAAK,CACd,aAAa,CAAE,IACnB"
}